{"version":3,"sources":["UserInput/UserInput.js","UserOutput/UserOutput.js","App.js","serviceWorker.js","index.js"],"names":["userInput","props","react_default","a","createElement","style","width","textAlign","type","onChange","updateName","value","topic","UserOutput","className","this","href","Component","App","state","headers","updateTopicNameHandler","event","_this","setState","target","UserInput","src_UserOutput_UserOutput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAceA,SAZC,SAACC,GAKb,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,MANH,CACRC,MAAO,IACPC,UAAW,UAIcC,KAAK,OAAOC,SAAUR,EAAMS,WAAYC,MAAOV,EAAMW,WCqBvEC,gMAxBP,OACIX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,aACXZ,EAAAC,EAAAC,cAAA,UAAKW,KAAKd,MAAMW,OAChBV,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACfZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,cACfZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,2BACXZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,2BACfZ,EAAAC,EAAAC,cAAA,QAAMU,UAAU,cAAhB,cACAZ,EAAAC,EAAAC,cAAA,6JAGAF,EAAAC,EAAAC,cAAA,OAAKU,UAAU,eACfZ,EAAAC,EAAAC,cAAA,KAAGY,KAAK,KAAR,kBACAd,EAAAC,EAAAC,cAAA,KAAGY,KAAK,KAAR,8BAhBKC,cCkCVC,6MA9BbC,MAAM,CACJC,QAAQ,CACN,uBACA,oBACA,+BAIJC,uBAAwB,SAACC,GACvBC,EAAKC,SAAS,CACZJ,QAAQ,CACNE,EAAMG,OAAOd,MACb,oBACA,uGAKJ,OACET,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACdZ,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACsB,EAAD,CAAWhB,WAAYK,KAAKM,uBAAwBT,MAAOG,KAAKI,MAAMC,QAAQ,KAC9ElB,EAAAC,EAAAC,cAACuB,EAAD,CAAYf,MAAOG,KAAKI,MAAMC,QAAQ,KACtClB,EAAAC,EAAAC,cAACuB,EAAD,CAAYf,MAAOG,KAAKI,MAAMC,QAAQ,KACtClB,EAAAC,EAAAC,cAACuB,EAAD,CAAYf,MAAOG,KAAKI,MAAMC,QAAQ,aA1B3BH,aCOEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.89f6022c.chunk.js","sourcesContent":["import React from 'react';\n\nconst userInput=(props)=>{\n    const style={\n        width: 400,\n        textAlign: 'center'\n    }\n    return(\n        <div >\n            <input style={style} type=\"text\" onChange={props.updateName} value={props.topic}/>\n        </div>\n    );\n}\n\nexport default userInput;","import React,{ Component } from \"react\";\nimport './UserOutput.css';\nimport 'materialize-css/dist/css/materialize.min.css'; \nclass UserOutput extends Component{\n\n    render(){\n        return(\n            <div className=\"Paragraph\">\n                <h4>{this.props.topic}</h4>\n                <div className=\"row\">\n                <div className=\"col s12 m6\">\n                <div className=\"card blue-grey darken-1\">\n                    <div className=\"card-content white-text\">\n                    <span className=\"card-title\">Card Title</span>\n                    <p>I am a very simple card. I am good at containing small bits of information.\n                    I am convenient because I require little markup to use effectively.</p>\n                    </div>\n                    <div className=\"card-action\">\n                    <a href=\"#\">This is a link</a>\n                    <a href=\"#\">This is a link</a>\n                    </div>\n                </div>\n                </div>\n            </div>\n            </div>\n        );\n    }\n\n}\n\nexport default UserOutput;","import React, { Component } from 'react';\nimport './App.css';\nimport UserInput from './UserInput/UserInput';\nimport UserOutput from \"./UserOutput/UserOutput\";\n\nclass App extends Component {\n  \n  state={\n    headers:[\n      'What is Lorem Ipsum?',\n      'Why do we use it?',\n      'Where does it come from?'\n    ]\n  }\n\n  updateTopicNameHandler= (event) =>{\n    this.setState({\n      headers:[\n        event.target.value,\n        'Why do we use it?',\n        'Where does it come from?'\n      ]\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n       <h1>React Assignment-1</h1>\n       <UserInput updateName={this.updateTopicNameHandler} topic={this.state.headers[0]}/>\n       <UserOutput topic={this.state.headers[0]}/>\n       <UserOutput topic={this.state.headers[1]}/>\n       <UserOutput topic={this.state.headers[2]}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}